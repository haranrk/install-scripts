" Load plugins using vim-plug
if !empty(glob("~/.vim/autoload/plug.vim"))
	call plug#begin()

	    Plug 'christoomey/vim-tmux-navigator'
	    Plug 'qpkorr/vim-renamer'
	    Plug 'tpope/vim-fugitive'
	    Plug 'tpope/vim-surround'
	    Plug 'tpope/vim-repeat'
            Plug 'tpope/vim-speeddating'
	    "Plug 'junegunn/fzf.vim'
	    Plug 'easymotion/vim-easymotion'
	    Plug 'scrooloose/nerdcommenter'
            Plug 'scrooloose/nerdtree'  " file list
            Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'} "Python syntax highlighter
            " For func argument completion
            Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
            "Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
            Plug 'deoplete-plugins/deoplete-jedi'
	    Plug 'wellle/tmux-complete.vim'
            Plug 'ujihisa/neco-look'
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            Plug 'vimwiki/vimwiki'
            Plug 'rhysd/vim-grammarous'
            " UI
	    Plug 'itchyny/lightline.vim'
            Plug 'junegunn/goyo.vim'
            Plug 'junegunn/limelight.vim'
            Plug 'junegunn/seoul256.vim'
            Plug 'mhinz/vim-startify'

            Plug 'alvan/vim-closetag'
            Plug 'mattn/emmet-vim'

	call plug#end()

        let g:user_emmet_leader_key=','
        let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

	let g:deoplete#enable_at_startup = 1
        let g:neosnippet#enable_completed_snippet = 1
        call deoplete#custom#option({
        \ 'auto_complete_delay': 0,
        \ 'smart_case': v:true,
        \ })
        
        nmap <Leader>g :GrammarousCheck<CR>
        nmap <C-N> <Plug>(grammarous-move-to-next-error)
        nmap <C-P> <Plug>(grammarous-move-to-previous-error)
        nmap <C-I> <Plug>(grammarous-open-info-window)

        "https://vi.stackexchange.com/questions/19675/cycle-through-autocomplete-menu-using-tab
        inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
        inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

	colorscheme seoul256
        let g:seoul256_background = 233
        colo seoul256
        let g:lightline = {'colorscheme': 'seoul256'}

        "Lightline
        set laststatus=2

endif

"Keybindings
set pastetoggle=<F2>
nnoremap ,<space> :nohl<CR>
noremap <C-S> :w<CR>
noremap <Tab> :tabnext<CR>
noremap <S-Tab> :tabprevious<CR>
"System clipboard
noremap <Leader>y "+y
noremap <Leader>p "+p

"General
filetype plugin indent on
syntax on
set foldcolumn=1
"Saves codefolds on exit
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent! loadview 
"autocmd CursorHold,CursorHoldI * update

"UI
set cursorline 
set background=dark
set number 
set wildmenu
set lazyredraw
set showmatch
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set splitbelow
set splitright

"Tabs
set tabstop=8 
set softtabstop=0 
set expandtab 
set shiftwidth=4 
set smarttab

autocmd FileType markdown set spell
