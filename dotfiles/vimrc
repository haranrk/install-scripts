" Load plugins using vim-plug
if !empty(glob("~/.vim/autoload/plug.vim"))
	call plug#begin()

	    Plug 'christoomey/vim-tmux-navigator'
	    Plug 'qpkorr/vim-renamer'
	    "Plug 'tpope/vim-fugitive'
	    Plug 'tpope/vim-surround'
	    Plug 'tpope/vim-repeat'
            Plug 'tpope/vim-speeddating'
	    "Plug 'junegunn/fzf.vim'
	    Plug 'easymotion/vim-easymotion'
	    Plug 'scrooloose/nerdcommenter'
            Plug 'scrooloose/nerdtree'  " file list
            Plug 'vim-denops/denops.vim'
            Plug 'Shougo/ddc.vim'
            " For func argument completion
            "Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
            ""Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
            "Plug 'deoplete-plugins/deoplete-jedi'
	    Plug 'wellle/tmux-complete.vim'
            Plug 'ujihisa/neco-look'
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            "Plug 'vimwiki/vimwiki'
            Plug 'rhysd/vim-grammarous'
            " UI
	    Plug 'itchyny/lightline.vim'
            Plug 'junegunn/goyo.vim'
            Plug 'junegunn/limelight.vim'
            Plug 'junegunn/seoul256.vim'
            "Plug 'mhinz/vim-startify'

            Plug 'alvan/vim-closetag'
            Plug 'mattn/emmet-vim'

	call plug#end()

        let g:user_emmet_leader_key=','
        let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

	"let g:deoplete#enable_at_startup = 1
        let g:python3_host_prog = '$HOME/miniconda/envs/dl/bin/python'
        let g:neosnippet#enable_completed_snippet = 1
        "call deoplete#custom#option({
        "\ 'auto_complete_delay': 0,
        "\ 'smart_case': v:true,
        "\ })
        
        nmap <Leader>g :GrammarousCheck<CR>
        nmap <C-N> <Plug>(grammarous-move-to-next-error)
        nmap <C-P> <Plug>(grammarous-move-to-previous-error)
        nmap <C-I> <Plug>(grammarous-open-info-window)


	colorscheme seoul256
        let g:seoul256_background = 233
        colo seoul256
        let g:lightline = {'colorscheme': 'seoul256'}

        "Limelight
        autocmd! User GoyoEnter Limelight
        autocmd! User GoyoLeave Limelight!

        "WordCount
        let g:lightline = {
      \ 'active': {
      \   'right': [ [ 'lineinfo' ], [ 'percent', 'wordcount' ], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'wordcount': 'WordCount',
      \ },
      \ }
        set laststatus=2


endif

"VimWiki
let g:vimwiki_table_mappings=0
let g:vimwiki_global_ext=0
let g:vimwiki_list = [{'path': '~/google-drive/vimwiki', 'path_html': '~/google-drive/vimwiki/rendered_html'}]

"https://vi.stackexchange.com/questions/19675/cycle-through-autocomplete-menu-using-tab
inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

"Keybindings
set pastetoggle=<F2>
nnoremap ,<space> :nohl<CR>
noremap <C-S> :w<CR>
noremap <Tab> :tabnext<CR>
noremap <S-Tab> :tabprevious<CR>
"System clipboard
noremap <Leader>y "+y
noremap <Leader>p "+p
nnoremap <space> za

"General
filetype plugin indent on
syntax on
set foldcolumn=1
"Saves codefolds on exit
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent! loadview 
"autocmd CursorHold,CursorHoldI * update

"UI
set cursorline 
set background=dark
set number 
set wildmenu
set lazyredraw
set showmatch
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set splitbelow
set splitright

"Tabs
set tabstop=8 
set softtabstop=0 
set expandtab 
set shiftwidth=4 
set smarttab

autocmd FileType markdown set spell

function! WordCount()
    let currentmode = mode()
    if !exists("g:lastmode_wc")
    let g:lastmode_wc = currentmode
    endif
        " if we modify file, open a new buffer, be in visual ever, or switch modes
        " since last run, we recompute.
    if &modified || !exists("b:wordcount") || currentmode =~? '\c.*v' || currentmode != g:lastmode_wc
    let g:lastmode_wc = currentmode
    let l:old_position = getpos('.')
    let l:old_status = v:statusmsg
    execute "silent normal g\<c-g>"
    if v:statusmsg == "--No lines in buffer--"
    let b:wordcount = 0
    else
    let s:split_wc = split(v:statusmsg)
    if index(s:split_wc, "Selected") < 0
    let b:wordcount = str2nr(s:split_wc[11])
    else
    let b:wordcount = str2nr(s:split_wc[5])
    endif
    let v:statusmsg = l:old_status
    endif
    call setpos('.', l:old_position)
    return b:wordcount
    else
    return b:wordcount
    endif
endfunction
